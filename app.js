// Generated by CoffeeScript 1.10.0
(function() {
  var BOARD_SIZE, Board, SIDE_LENGTH, b, checkWin, max, maxIndex, min, minIndex, minimax;

  SIDE_LENGTH = 3;

  BOARD_SIZE = Math.pow(SIDE_LENGTH, 2);

  max = function(arr) {
    var i, k, len, res;
    res = -Infinity;
    for (k = 0, len = arr.length; k < len; k++) {
      i = arr[k];
      if (i > res) {
        res = i;
      }
    }
    return res;
  };

  min = function(arr) {
    var i, k, len, res;
    res = Infinity;
    for (k = 0, len = arr.length; k < len; k++) {
      i = arr[k];
      if (i < res) {
        res = i;
      }
    }
    return res;
  };

  maxIndex = function(arr) {
    var elem, index, k, len, mx, result;
    if (arr === []) {
      return;
    }
    mx = -Infinity;
    result = 0;
    for (index = k = 0, len = arr.length; k < len; index = ++k) {
      elem = arr[index];
      if (elem > mx) {
        result = index;
      }
      if (elem > mx) {
        mx = elem;
      }
    }
    return result;
  };

  minIndex = function(arr) {
    var elem, index, k, len, mn, result;
    if (arr === []) {
      return;
    }
    mn = Infinity;
    result = 0;
    for (index = k = 0, len = arr.length; k < len; index = ++k) {
      elem = arr[index];
      if (elem < mn) {
        result = index;
      }
      if (elem < mn) {
        mn = elem;
      }
    }
    return result;
  };

  checkWin = function(arr) {
    var i, k, same, winner;
    same = function(arr, filter) {
      var first, index, k, len, val;
      first = void 0;
      for (index = k = 0, len = arr.length; k < len; index = ++k) {
        val = arr[index];
        if (filter(val, index)) {
          if (first == null) {
            first = val;
          }
          if (val !== first) {
            return false;
          }
        }
      }
      return first;
    };
    for (i = k = 0; k <= 2; i = ++k) {
      if (winner = same(arr, function(x, j) {
        return j % SIDE_LENGTH === i;
      })) {
        return winner;
      }
      if (winner = same(arr, function(x, j) {
        return Math.floor(j / SIDE_LENGTH) === i;
      })) {
        return winner;
      }
    }
    if (winner = same(arr, function(x, j) {
      return j % SIDE_LENGTH === Math.floor(j / SIDE_LENGTH);
    })) {
      return winner;
    }
    if (winner = same(arr, function(x, j) {
      return j % SIDE_LENGTH === SIDE_LENGTH - 1 - Math.floor(j / SIDE_LENGTH);
    })) {
      return winner;
    }
    return false;
  };

  minimax = function(board, curPlayer, depth) {
    var elem, index, k, len, newBoard, scores, winner;
    winner = checkWin(board);
    if (winner === 1) {
      return BOARD_SIZE - depth;
    }
    if (winner === 2) {
      return -BOARD_SIZE + depth;
    }
    if (depth === BOARD_SIZE - 1) {
      return 0;
    }
    scores = (function() {
      var k, ref, results;
      results = [];
      for (k = 0, ref = BOARD_SIZE; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--) {
        results.push(void 0);
      }
      return results;
    })();
    for (index = k = 0, len = board.length; k < len; index = ++k) {
      elem = board[index];
      if (elem) {
        continue;
      }
      newBoard = board.slice(0);
      newBoard[index] = curPlayer;
      scores[index] = minimax(newBoard, curPlayer % 2 + 1, depth + 1);
    }
    if (curPlayer === 1) {
      return max(scores);
    }
    if (curPlayer === 2) {
      return min(scores);
    }
  };

  Board = (function() {
    function Board(element, infoElem, undoElem, resetElem) {
      var i, k, node, ref;
      this.element = element;
      this.infoElem = infoElem;
      this.undoElem = undoElem;
      this.resetElem = resetElem;
      this.element.onclick = (function(_this) {
        return function(e) {
          return _this.onClick(e);
        };
      })(this);
      this.undoElem.onclick = (function(_this) {
        return function(e) {
          return _this.undo();
        };
      })(this);
      this.resetElem.onclick = (function(_this) {
        return function(e) {
          return _this.recreate([]);
        };
      })(this);
      this.recreate([]);
      for (i = k = 0, ref = BOARD_SIZE; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        node = document.createElement('li');
        node.setAttribute('id', "sq" + i);
        node.setAttribute('class', 'square');
        node.order = i;
        this.element.appendChild(node);
      }
    }

    Board.prototype.recreate = function(pastMoves) {
      var k, len, move, results;
      this.pastMoves = [];
      this.board = (function() {
        var k, ref, results;
        results = [];
        for (k = 0, ref = BOARD_SIZE; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--) {
          results.push(0);
        }
        return results;
      })();
      this.curPlayer = 1;
      this.curWinner = 0;
      results = [];
      for (k = 0, len = pastMoves.length; k < len; k++) {
        move = pastMoves[k];
        results.push(this.playAt(move));
      }
      return results;
    };

    Board.prototype.undo = function() {
      this.pastMoves.pop();
      this.recreate(this.pastMoves);
      return this.render();
    };

    Board.prototype.checkWin = function() {
      return checkWin(this.board);
    };

    Board.prototype.catsGame = function() {
      return !this.board.some(function(x) {
        return x === 0;
      });
    };

    Board.prototype.playAt = function(index) {
      if (this.board[index]) {
        return;
      }
      this.pastMoves.push(index);
      this.board[index] = this.curPlayer;
      this.curPlayer = this.curPlayer % 2 + 1;
      return this.curWinner = this.checkWin();
    };

    Board.prototype.onClick = function(e) {
      if (!this.curWinner) {
        this.playAt(e.target.order);
      }
      return this.render();
    };

    Board.prototype.render = function() {
      var index, k, len, node, ref, val;
      ref = this.board;
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        val = ref[index];
        node = document.getElementById("sq" + index);
        node.setAttribute("player", val);
        node.setAttribute("suggested", false);
        node.style.setProperty('height', "calc(" + (100 / SIDE_LENGTH) + "%-2px);");
        node.style.setProperty('width', "calc(" + (100 / SIDE_LENGTH) + "%-2px);");
        node.classList.remove('prev');
      }
      if (this.pastMoves.length >= 1) {
        document.getElementById("sq" + this.pastMoves[this.pastMoves.length - 1]).classList.add('prev');
      }
      this.infoElem.textContent = "Player " + this.curPlayer + "'s turn";
      if (this.curWinner) {
        this.infoElem.textContent = "Player " + this.curWinner + " has won";
      }
      this.infoElem.setAttribute('player', this.curWinner || this.curPlayer);
      if (this.catsGame()) {
        this.infoElem.textContent = "Cat's game";
        this.infoElem.setAttribute('player', 0);
      }
      if (!this.checkWin() && !this.catsGame()) {
        return document.getElementById("sq" + (this.suggestMove())).setAttribute('suggested', this.curPlayer);
      }
    };

    Board.prototype.suggestMove = function() {
      var d, elem, index, k, len, newBoard, ref, scores;
      d = Date.now();
      scores = (function() {
        var k, ref, results;
        results = [];
        for (k = 0, ref = BOARD_SIZE; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--) {
          results.push(void 0);
        }
        return results;
      })();
      ref = this.board;
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        elem = ref[index];
        if (elem) {
          continue;
        }
        newBoard = this.board.slice(0);
        newBoard[index] = this.curPlayer;
        scores[index] = minimax(newBoard, this.curPlayer % 2 + 1, this.pastMoves.length);
      }
      console.log("scores", Date.now() - d);
      if (this.curPlayer === 1) {
        return maxIndex(scores);
      }
      if (this.curPlayer === 2) {
        return minIndex(scores);
      }
    };

    return Board;

  })();

  b = new Board(document.getElementById('board'), document.getElementById('info'), document.getElementById('undo'), document.getElementById('reset'));

  b.render();

}).call(this);
