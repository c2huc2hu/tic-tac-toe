// Generated by CoffeeScript 1.10.0
(function() {
  var Board, PLAYER_COLORS, b;

  PLAYER_COLORS = ['blue', 'red'];

  Board = (function() {
    function Board(element, infoElem, undoElem) {
      var i, k, node;
      this.element = element;
      this.infoElem = infoElem;
      this.undoElem = undoElem;
      this.element.onclick = (function(_this) {
        return function(e) {
          return _this.onClick(e);
        };
      })(this);
      this.undoElem.onclick = (function(_this) {
        return function(e) {
          return _this.undo();
        };
      })(this);
      this.recreate([]);
      for (i = k = 0; k < 9; i = ++k) {
        node = document.createElement('li');
        node.setAttribute('id', "sq" + i);
        node.setAttribute('class', 'square');
        node.order = i;
        this.element.appendChild(node);
      }
    }

    Board.prototype.recreate = function(pastMoves) {
      var k, len, move, results;
      console.log(pastMoves);
      this.pastMoves = [];
      this.board = (function() {
        var k, results;
        results = [];
        for (k = 0; k < 9; k++) {
          results.push(0);
        }
        return results;
      })();
      this.curPlayer = 1;
      this.curWinner = 0;
      results = [];
      for (k = 0, len = pastMoves.length; k < len; k++) {
        move = pastMoves[k];
        results.push(this.playAt(move));
      }
      return results;
    };

    Board.prototype.undo = function() {
      this.pastMoves.pop();
      this.recreate(this.pastMoves);
      return this.render();
    };

    Board.prototype.checkWin = function() {
      var i, k, same, winner;
      same = function(arr, filter) {
        var first, index, k, len, val;
        first = void 0;
        for (index = k = 0, len = arr.length; k < len; index = ++k) {
          val = arr[index];
          if (filter(val, index)) {
            if (first == null) {
              first = val;
            }
            if (val !== first) {
              return false;
            }
          }
        }
        return first;
      };
      for (i = k = 0; k <= 2; i = ++k) {
        if (winner = same(this.board, function(x, j) {
          return j % 3 === i;
        })) {
          return winner;
        }
        if (winner = same(this.board, function(x, j) {
          return Math.floor(j / 3) === i;
        })) {
          return winner;
        }
      }
      if (winner = same(this.board, function(x, j) {
        return j % 3 === Math.floor(j / 3);
      })) {
        return winner;
      }
      if (winner = same(this.board, function(x, j) {
        return j % 3 === 2 - Math.floor(j / 3);
      })) {
        return winner;
      }
      return false;
    };

    Board.prototype.playAt = function(index) {
      if (this.board[index]) {
        return;
      }
      this.pastMoves.push(index);
      this.board[index] = this.curPlayer;
      this.curPlayer = this.curPlayer % 2 + 1;
      return this.curWinner = this.checkWin();
    };

    Board.prototype.onClick = function(e) {
      if (!this.curWinner) {
        this.playAt(e.target.order);
      }
      return this.render();
    };

    Board.prototype.render = function() {
      var index, k, len, node, ref, val;
      ref = this.board;
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        val = ref[index];
        node = document.getElementById("sq" + index);
        node.setAttribute("player", val);
        node.style.setProperty('height', "calc(" + (100 / 3) + "%-2px);");
        node.style.setProperty('width', "calc(" + (100 / 3) + "%-2px);");
        node.classList.remove('prev');
      }
      if (this.pastMoves.length >= 1) {
        document.getElementById("sq" + this.pastMoves[this.pastMoves.length - 1]).classList.add('prev');
      }
      this.infoElem.textContent = "Player " + this.curPlayer + "'s turn";
      if (this.curWinner) {
        this.infoElem.textContent = "Player " + this.curWinner + " has won";
      }
      this.infoElem.setAttribute('player', this.curWinner || this.curPlayer);
      if (!(this.board.some(function(x) {
        return x === 0;
      }))) {
        this.infoElem.textContent = "Cat's game";
        return this.infoElem.setAttribute('player', 0);
      }
    };

    return Board;

  })();

  b = new Board(document.getElementById('board'), document.getElementById('info'), document.getElementById('undo'));

  b.render();

}).call(this);
